Dependency Injection Lifetime: Transient, Singleton & Scoped

Understanding the lifetime of the services created using the Dependency injection is very essential,
before starting to using them. 

Creating services without understanding the difference between 
Transient, Singleton & Scoped lifetime can result in application behaving erratically. 

When a service requests another service via DI, 
knowing whether it receives the NEW INSTANCE or an ALREADY CREATED INSTANCE
is very important. 

Hence correctly specifying the lifetime while registering the service are utmost important.

Managing the Service Lifetime

Whenever we ask for the service, the DI Container has to decide 
whether to return a NEW INSTANCE of the service or provide an EXISTING INSTANCE. 

The Lifetime of the Service depends on when the dependency is instantiated and 
how long does it live. We define the lifetime when we register the service.

We learnt how to register services in the article Dependency injection in ASP.NET core. 
There are three ways, by which you can do that, 
which in turn decides how the lifecycle of the services are managed.

Transient: New instance is created, every time you create/REQUEST a service

Scoped: New instance is generated for every scope. ( Each request is a Scope). 
Within the scope, service is reused.

Singleton: Service is created only once, and used everywhere
Let us understand the difference between these by using an example

Add the three interfaces. 
One for each lifetime provided by the ASP.NET Core. 
The interface is very simple. It contains single method GetID, 
which must return a unique ID

public interface ITransientService
{
    Guid GetID();
}

public interface IScopedService
{
    Guid GetID();
}

public interface ISingletonService
{
    Guid GetID();
}

Creating the Service
Next, let us create a single service, which implements all the three Interfaces.


public class SomeService : ITransientService, IScopedService, ISingletonService
{
    Guid id;
    public SomeService()
    {
        id = Guid.NewGuid();
    }

    public Guid GetID()
    {
        return id;
    }
}


The service generates a unique id, whenever it is instantiated and returns that id in the 
GetID method.

Now, let us look at each service lifetime in detail.

=================================================

Transient Service in ASP.NET Core Dependency Injection

Transient
The Transient services are always created new, each time the service is requested.

Register the Transient Service
Now, under ConfigureServices method of the startup class register the 
SomeServive via ITransientService interface as shown below
services.AddTransient<ITransientService, SomeService>();
 
Inject it into Controller
Open the HomeController and inject the two instance of the SomeService as shown below

public class HomeController : Controller
{
    ITransientService _transientService1;
    ITransientService _transientService2;

    public HomeController(ITransientService transientService1,
                          ITransientService transientService2)
    {
        _transientService1 = transientService1;
        _transientService2 = transientService2;
    }

    public IActionResult Index()
    {

        ViewBag.message1 ="First Instance " + _transientService1.GetID().ToString();
        ViewBag.message2 ="Second Instance "+ _transientService2.GetID().ToString();

        return View();
    }
}

First, We inject the two instance of the service via the interface ITransientService in 
the constructor of HomeController.

<h3>Transient Service</h3>
@ViewBag.message1
</br>
@ViewBag.message2
 
Run the application and you should see TWO DIFFERNET GUIDS are displayed on the screen. 
It is evident that we have received TWO NEW INSTANCES of the Transient service.

=====================================================

Scoped Service in ASP.NET Core Dependency Injection

The Services with scoped lifetime are created only once per each request (scope). 
I.e. a new instance is created per request, and the instance is reused within that request.

Register the Scoped Service

services.AddScoped<IScopedService, SomeService>();

Inject scoped service into Controller
Next, inject the service into the controller. 
We already have transient service injected into the controller. 
Let us not change that. The HomeController is now as below

public class HomeController : Controller
{

    ITransientService _transientService1;
    ITransientService _transientService2;

    IScopedService _scopedService1;
    IScopedService _scopedService2;


    public HomeController(ITransientService transientService1,
                          ITransientService transientService2, 
                          IScopedService scopedService1,
                          IScopedService scopedService2)
    {
        _transientService1 = transientService1;
        _transientService2 = transientService2;

        _scopedService1 = scopedService1;
        _scopedService2 = scopedService2;
    }

    public IActionResult Index()
    {

        ViewBag.message1 ="First Instance " + _transientService1.GetID().ToString();
        ViewBag.message2 ="Second Instance "+ _transientService2.GetID().ToString();

        ViewBag.message3 = "First Instance " + _scopedService1.GetID().ToString();
        ViewBag.message4 = "Second Instance " + _scopedService2.GetID().ToString();

        return View();
     }
}

In the action method, message3 & message4 comes from the scoped service.

<h3>Scoped Service</h3>
@ViewBag.message3
</br>
@ViewBag.message4

The instance created only once per request, i.e. why you have same id’s generated.

Now hit the browser refresh button. The id changes i.e. because the new instance 
is created for every request.

================================================

Singleton Service in ASP.NET Core Dependency Injection

Singleton
Single Instance of the service is created when it was requested for the first time. After that for every subsequent request, it will use the same instance. The new request does not create the new instance of the service but reuses the instance already created.

Register the Singleton Service
Singleton services are registered using the AddSingleton method.

services.AddSingleton<ISomeServiceService, SomeService>();
 
Inject Singleton service into Controller

public class HomeController : Controller
{
    ITransientService _transientService1;
    ITransientService _transientService2;

    IScopedService _scopedService1;
    IScopedService _scopedService2;

    ISingletonService _singletonService1;
    ISingletonService _singletonService2;

    public HomeController(ITransientService transientService1,
                      ITransientService transientService2, 
                      IScopedService scopedService1,
                      IScopedService scopedService2,
                      ISingletonService singletonService1,
                      ISingletonService singletonService2)
    {

        _transientService1 = transientService1;
        _transientService2 = transientService2;

        _scopedService1 = scopedService1;
        _scopedService2 = scopedService2;

        _singletonService1 = singletonService1;
        _singletonService2 = singletonService2;

     }

     public IActionResult Index()
     {

         ViewBag.message1 ="First Instance " + _transientService1.GetID().ToString();
         ViewBag.message2 ="Second Instance "+ _transientService2.GetID().ToString();


         ViewBag.message3 = "First Instance " + _scopedService1.GetID().ToString();
         ViewBag.message4 = "Second Instance " + _scopedService2.GetID().ToString();

         ViewBag.message5 = "First Instance " + _singletonService1.GetID().ToString();
         ViewBag.message6 = "Second Instance " + _singletonService2.GetID().ToString();

         return View();
     }
}

First, we are injecting 6 instances the SomeService. 
Two instances per each interface. This is done in the constructor of the Controller.

<h3>Singleton Service</h3>
@ViewBag.message5
</br>
@ViewBag.message6

Run the application. The ids generated from Singleton services are same and will not 
change even if you refresh the application. You can see it from the image below

Which one to use



TRANSIENT SERVICE
======================================
IF ONE OBJECT IS USED ONLY ONCE IN THE SCOPE/REQUEST THEN
TRNSIENT SERVICE == SCOPED SERVICE
AND FOR CLARITY IT IS BETTER TO USE SCOPED SERVICE
EACH REQUEST WITHIN SCOPE USES NEW INSTANCE
USE MORE MEMORY & RESOURCES ON SERVER
LESS FREQUENT REQUEST OF OBJECTS SHOULD BE USED
LIGHWEIGHT OBJECTS WITH LIGHT STATE SHOULD BE USED IN TRANSIENT SERVICE


TRANSIETS SERVICE 
================================
Transient services are safest to create, as you always get the new instance.
But, since they are created every time they will use more memory & Resources 
and can have the negative impact on performance if you USE too many of them.
Use Transient lifetime for the lightweight service with little or no state.


Scoped services service is the better option when 
you want to MAINTAIN A STATE WITHIN THE REQUEST.


Singletons are created only once and not destroyed until the end of the Application. 
Any memory leaks in these services will build up over time. 
Hence watch out for the memory leaks. 
Singletons are also memory efficient as they are created once reused everywhere.

Use Singletons where you need to maintain application wide state. 
==Application configuration or Application parameters, 
==Logging Service, caching of data 
is some of the examples where you can use singletons.

Injecting service with different lifetimes into another

INJECTING SERVICE TO ANOTHER SERVICE, BOTH HAVING DIFF LIFTIME
COMPOSING SERIVCES BOTH OF THEM ARE INJECTED IN DI

Be careful, while injecting service into another service with a different lifetime

Consider the example of Singleton Service (LONGER LIFE TIME), 
which depends on another Service which is registered 
with say the transient lifetime. (SHORTER LIFETIME)

LONGER LIFE TIME OBJECT (CONTAINS SHORTER LIFETIME) ==> OVERALL LONGER LIFE TIME OBJECT
APPLICATION SERVICE/SINGLETON (CONTAINING TRANSIET SERVICE ) ==> APPLICATION SERVICE
APPLICATION SERVICE/SINGLETON (CONTAINING SCOPED SERVICE ) ==> APPLICATION SERVICE
SCOPED SERVICE (CONTAINING TRANSIET SERVICE ) ==> SCOPED SERVICE

ROOT OBJECT LIFETIME PERVAILS ALL THE CONTAINING OBJECTS

IF ROOT IS SINGLTON, THEN TRANSIET IS ALSO SINGLETON
IF ROOT IS SINGLTON, THEN SCOPED IS ALSO SINGLETON

IF ROOT IS SCOPED, THEN TRANSIET IS ALSO SCOPED
IF ROOT IS SCOPED, THEN SINGLETON IS SINGLTON

IF ROOT IS TRANSIET, THEN SCOPED IS SCOPED
IF ROOT IS TRANSIET, THEN SINGLETON IS SINGLTON

FIRST REQUEST
When the request comes for the first time a new instance of the singleton is created. 
It also creates a new instance of the transient object and injects into the Singleton service.

SECOND REQUEST
When the second request arrives the instance of the singleton is reused. 
The singleton already contains the instance of the transient service 
Hence it is not created again. 
This effectively converts the transient service into the singleton.

The services with the lower lifetime injected into service with higher lifetime 
would change the lower lifetime service to higher lifetime. 

This will make the debugging the application very difficult and SHOULD BE AVOIDED at all costs.

Hence, remember the following rules

NEVER MIXED UP
Never inject Scoped & Transient (SHORT LIFTIME) services into Singleton service.(LONG LIFE TIME)

Never inject Transient services (SHORT LIFETIME) into scoped service (LONG LIFTIME)

Summary
In this tutorial, we looked at the lifetime and their consequences of the services 
that registered with ASP.NET Core dependency injection system.
