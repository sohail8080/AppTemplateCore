using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Text;
using System.Text.Encodings.Web;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;
using AppTemplateCore.Areas.Identity.Models;

namespace AppTemplateCore.Areas.Identity.Pages.Account.Manage
{
    public class EnableAuthenticatorModel : PageModel
    {
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly ILogger<EnableAuthenticatorModel> _logger;
        private readonly UrlEncoder _urlEncoder;

        private const string AuthenticatorUriFormat = "otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6";

        public EnableAuthenticatorModel(
            UserManager<ApplicationUser> userManager,
            ILogger<EnableAuthenticatorModel> logger,
            UrlEncoder urlEncoder)
        {
            _userManager = userManager;
            _logger = logger;
            _urlEncoder = urlEncoder;
        }

        // authenticator key
        public string SharedKey { get; set; }

        // authenticator URI
        public string AuthenticatorUri { get; set; }

        // Summary:
        //     Properties decorated with TempDataAttribute will have
        //     their values stored in and loaded from the ViewFeatures.ITempDataDictionary.
        //     TempDataAttribute is supported on properties of Controllers,
        //     Razor Pages, and Razor Page Models.

        [TempData]
        public string[] RecoveryCodes { get; set; }

        [TempData]
        public string StatusMessage { get; set; }

        [BindProperty]
        public InputModel Input { get; set; }

        public class InputModel
        {
            // verificationCode
            [Required]
            [StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
            [DataType(DataType.Text)]
            [Display(Name = "Verification Code")]
            public string Code { get; set; }
        }


        // HOW APPLICATION IS HANDLING FOLLOWING TWO DIFFERETN SCENAROS BY SAME SCREEN
        // Case1: (HOW THIS SCREEN HANDL THIS CASE just want to enable 2FA)
        // Auth Key is there in DB, but 2FA is not enabled, we manually disable it
        // or we are going to enable it first time.
        // Usually this is the case after Resetting Auth App Key.
        // In this case User should not be shown Auth App Key as App is already configured.
        // Case2: (THIS CASE IS DONE NICE)
        // User do not has the Authenticator App Key.
        // Usually this key is stored in DB, generated by User Manager
        // He want to Configure Auth App & Enable 2FA in one step.

        // This View show the all the 2FA Options
        // Provide options if User has not enabled 2FA
        // Provide options if User has already enabled 2FA
        // Home Page of 2FA
        public async Task<IActionResult> OnGetAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            // Load two member variables holding the Authenticator Keys & QRCodeURI
            // These values shown up on the UI
            await LoadSharedKeyAndQrCodeUriAsync(user);

            return Page();
        }


        // Your authenticator app has been verified and enabled by
        // Validating the Verification Code/2FA Token
        // If Verification Code/2FA Token is Valid then Enable 2FA for the User
        // It seems User is hooking up Authenticator of his Choice.
        // Web site gives Options to hookup selected Authenticator App ??
        // or Any Authenticator App can be hooked.
        public async Task<IActionResult> OnPostAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            if (!ModelState.IsValid)
            {

                // Load two member variables holding the Authenticator Key & QRCodeURI
                // Set the USER'S authenticator key in SharedKey variable to show in View
                // USER'S authenticator key is generated by the User Manager

                // Load two member variables holding the Authenticator Key & QRCodeURI
                // Load the authenticator key in the SharedKey variable
                // Load the QrCodeUri in the AuthenticatorUri variable
                // Format authenticator key generated by UserManager, saved in ApplicationDB i think
                // This is some random key generated by application that is needed in 2FA
                // Based on this Athen Key, the Verification Code and Recover Codes are generated.

                // WE are showing same page again, that is why Load Auth App Key & URL

                await LoadSharedKeyAndQrCodeUriAsync(user);
                return Page();
            }

            // Strip spaces and hypens
            // Get the Verfication Code Entered by the User
            // This Verfication Code is given by the Mobile Auth Application

            var verificationCode = Input.Code.Replace(" ", string.Empty).Replace("-", string.Empty);

            //   Verifies Verfication Code/2FA Token against the user.
            //   This Verfication Code is given by the Mobile Auth Application
            //   Parameters:
            //   1- user: The user the token is supposed to be for.
            //   2- tokenProvider: The provider which will verify the Verfication Code/token.
            //      Provider used to validate two factor sign ins with an authenticator.
            //   3- token: Verfication Code/Token to verify.
            //     AuthenticatorTokenProvider
            //   Gets the AuthenticatorTokenProvider that is 
            //   used to validate two factor sign ins with an authenticator.

            var is2faTokenValid = await _userManager.VerifyTwoFactorTokenAsync(
                user, _userManager.Options.Tokens.AuthenticatorTokenProvider, verificationCode);

            if (!is2faTokenValid)
            {
                ModelState.AddModelError("Input.Code", "Verification code is invalid.");
                // Load two member variables holding the Auth Keys & QRCodeURI
                // Validation failed, again show the same page
                await LoadSharedKeyAndQrCodeUriAsync(user);
                return Page();
            }

            // Enable 2FA for the User if the 2faTokenValid/Verification Code is valid
            await _userManager.SetTwoFactorEnabledAsync(user, true);
            var userId = await _userManager.GetUserIdAsync(user);
            _logger.LogInformation("User with ID '{UserId}' has enabled 2FA with an authenticator app.", userId);

            //     Returns how many recovery code are still valid for a user.
            StatusMessage = "Your authenticator app has been verified.";

            if (await _userManager.CountRecoveryCodesAsync(user) == 0)
            {
                // Generates recovery codes for the user, 
                // this invalidates any previous recovery
                // codes for the user.
                // Recovery Codes are used to Login Under 2FA witout involving Auth App on Mobile

                var recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);
                // Page ShowRecoveryCodes does not exist, create it yourself

                RecoveryCodes = recoveryCodes.ToArray();
                return RedirectToPage("./ShowRecoveryCodes");
            }
            else
            {
                // If Enough Recover Codes are there.
                return RedirectToPage("./TwoFactorAuthentication");
            }
        }

        // Load two member variables holding the Authenticator Key & QRCodeURI
        // Load the authenticator key in the SharedKey variable
        // Load the QrCodeUri in the AuthenticatorUri variable
        // Format authenticator key generated by UserManager, saved in ApplicationDB i think
        // This is some random key generated by application that is needed in 2FA
        // Based on this Athen Key, the Verification Code and Recover Codes are generated.
        private async Task LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user)
        {
            // Load the authenticator key & QR code URI to display on the form
            //     Returns the authenticator key for the user.
            // Format authenticator key generated by UserManager, saved in ApplicationDB i think
            // This is some random key generated by application that is needed in 2FA
            // Based on this Athen Key, the Verification Code and Recover Codes are generated.
            // IF USER IS ENABLING 2FA FIRST TIME, THEN FOLLOWING METHOD WILL RETURN NULL/EMPTY

            var unformattedKey = await _userManager.GetAuthenticatorKeyAsync(user);
            if (string.IsNullOrEmpty(unformattedKey))
            {
                // IF USER IS ENABLING 2FA FIRST TIME OR 
                // USER HAS RESET THE AUTH APP KEY BY USER MANAGER
                //     Resets the authenticator key for the user. I think in the DB

                await _userManager.ResetAuthenticatorKeyAsync(user);

                //     Returns the authenticator key for the user. I think form DB
                // Format authenticator key generated by UserManager, saved in ApplicationDB i think
                // This is some random key generated by application that is needed in 2FA
                // Based on this Athen Key, the Verification Code and Recover Codes are generated.

                unformattedKey = await _userManager.GetAuthenticatorKeyAsync(user);
            }

            // Format the USER'S authenticator key
            // Format authenticator key generated by UserManager, saved in ApplicationDB i think
            // This is some random key generated by application that is needed in 2FA
            // Based on this Athen Key, the Verification Code and Recover Codes are generated.

            SharedKey = FormatKey(unformattedKey);

            //     Gets the email address for the specified user.

            var email = await _userManager.GetEmailAsync(user);

            // AuthenticatorUri QrCodeUri is generated by the Email and the Authenticator Key
            AuthenticatorUri = GenerateQrCodeUri(email, unformattedKey);
        }

        // Format authenticator key generated by UserManager, saved in ApplicationDB i think
        // This is some random key generated by application that is needed in 2FA
        // Based on this Athen Key, the Verification Code and Recover Codes are generated.
        private string FormatKey(string unformattedKey)
        {
            var result = new StringBuilder();
            int currentPosition = 0;
            while (currentPosition + 4 < unformattedKey.Length)
            {
                result.Append(unformattedKey.Substring(currentPosition, 4)).Append(" ");
                currentPosition += 4;
            }
            if (currentPosition < unformattedKey.Length)
            {
                result.Append(unformattedKey.Substring(currentPosition));
            }

            return result.ToString().ToLowerInvariant();
        }

        // Generate the URI for displaying QR Code
        // QR Code will be generated based on WebApplication1, Email, 
        // AuthenticatorKey of User generated by the UserManager
        // Every User has it own special QR Code that is generated based on 
        // 1- His Email 2- His Auth Key generated by UserManager stored in Application DB
        private string GenerateQrCodeUri(string email, string unformattedKey)
        {
            //"otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6";
            //"otpauth://totp/WebApplication1:abc@gmail.com?secret={AuthenticatorKey}&issuer={WebApplication1}&digits=6";
            // unfomrattedKey =  Authenticator key returned by UserManager 
            // for the user. I think form DB
            return string.Format(
                AuthenticatorUriFormat, // Authenticator URI: hard coded string
                _urlEncoder.Encode("AppTemplateCore"), //0 Application name
                _urlEncoder.Encode(email), // 1 Email
                unformattedKey);  // 2 Auth App Secret = Authenticator key
        }
    }
}
