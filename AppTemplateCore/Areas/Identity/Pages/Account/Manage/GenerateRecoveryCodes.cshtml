@page
@model GenerateRecoveryCodesModel
@{
    ViewData["Title"] = "Generate two-factor authentication (2FA) recovery codes";
    ViewData["ActivePage"] = ManageNavPages.TwoFactorAuthentication;
}

<partial name="_StatusMessage" for="StatusMessage" />
<h4>@ViewData["Title"]</h4>
<div class="alert alert-warning" role="alert">
    <p>
        <span class="glyphicon glyphicon-warning-sign"></span>
        <strong>Put these codes in a safe place.</strong>
    </p>
    <p>

        @*
        There are two ways to login under 2FA
        1- Using the Authenticator Application
        2- Using the Recover Codes (If Authenticator App is down or not available)
        This screen is used to generated the recovery codes.
        This screen explains why you need recovery codes.
        Pressing the button will generated recovery codes.
        These Recover Codes should be placed on paper on in safe place.
        These Recovery Codes are not given inside the Auth App for Login
        These Recover Codes are given inside the Web App for Login
        These Recovery Codes are to bypass the Auth Application and Login without it.
        Changing the Auth App keys is RESETTING the Authenticator.
        When we want to RESET the Authenticator ????
        RESETTING the Authenticator invalidates the Recover Codes generated previously.
        New set of Recover Codes should be generated.
        To Generated Recovery Codes you must have 2FA enabled for the specific User

        *@

        If you lose your device and don't have the recovery codes you will lose access to your account.
    </p>
    <p>
        Generating new recovery codes does not change the keys used in authenticator apps. If you wish to change the key
        used in an authenticator app you should <a asp-page="./ResetAuthenticator">reset your authenticator keys.</a>
    </p>
</div>
<div>
    <form method="post" class="form-group">
        <button class="btn btn-danger" type="submit">Generate Recovery Codes</button>
    </form>
</div>