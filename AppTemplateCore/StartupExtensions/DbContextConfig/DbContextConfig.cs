using AppTemplateCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace AppTemplateCore.StartupExtensions
{
    public static class DbContextConfig
    {

        public static void Add_DBContext_Config(this IServiceCollection services, IConfiguration Configuration, string _contentRootPath)
        {

            //services.AddDbContext<ApplicationDbContext>(options =>
            //    options.UseSqlServer(
            //        Configuration.GetConnectionString(DefaultConnection)));

            string DefaultConnection = Configuration.GetConnectionString("DefaultConnection");
            if (DefaultConnection.Contains("%CONTENTROOTPATH%"))
            {
                DefaultConnection = DefaultConnection.Replace("%CONTENTROOTPATH%", _contentRootPath);
            }

            // Add UOW Service to DI Container & Configure its Settings
            // This Service is now available throughout application Pages/Controllers
            services.AddDbContext<ApplicationDbContext>(options =>
            {
                // Hooking UOW to the SQL Server
                // Configures UOW to connect to a Microsoft SQL Server database.
                // Set Connection String of the SQL Server we want to hook
                options.UseSqlServer(DefaultConnection);
            });



        }


        public static void Add_DBContext_Config2(this IServiceCollection services, IConfiguration Configuration, string _contentRootPath)
        {

            //services.AddDbContext<ApplicationDbContext>(options =>
            //    options.UseSqlServer(
            //        Configuration.GetConnectionString(DefaultConnection)));

            string DefaultConnection = Configuration.GetConnectionString("DefaultConnection");
            if (DefaultConnection.Contains("%CONTENTROOTPATH%"))
            {
                DefaultConnection = DefaultConnection.Replace("%CONTENTROOTPATH%", _contentRootPath);
            }

            // Add UOW Service to DI Container & Configure its Settings
            // This Service is now available throughout application Pages/Controllers
            services.AddDbContext<ApplicationDbContext>(options =>
            {
                // Hooking UOW to the SQL Server
                // Configures UOW to connect to a Microsoft SQL Server database.
                // Set Connection String of the SQL Server we want to hook
                options.UseSqlServer(DefaultConnection);


                // Summary:
                //     Configures the runtime behavior of warnings generated by Entity Framework. You
                //     can set a default behavior and behaviors for each warning type.
                //     Note that changing this configuration can cause EF to build a new internal service
                //     provider, which may cause issues with performance. Generally it is expected that
                //     no more than one or two different configurations will be used for a given application.
                //     Note that if the application is setting the internal service provider through
                //     a call to Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider),
                //     then this option must configured the same way for all uses of that service provider.
                //     Consider instead not calling Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)
                //     so that EF will manage the service providers and can create new instances as
                //     required.
                //
                // Parameters:
                //   warningsConfigurationBuilderAction:
                //     An action to configure the warning behavior.
                //
                // Returns:
                //     The same builder instance so that multiple calls can be chained.
                //options.ConfigureWarnings();


                // Summary:
                //     Enables detailed errors when handling of data value exceptions that occur during
                //     processing of store query results. Such errors most often occur due to misconfiguration
                //     of entity properties. E.g. If a property is configured to be of type 'int', but
                //     the underlying data in the store is actually of type 'string', then an exception
                //     will be generated at runtime during processing of the data value. When this option
                //     is enabled and a data error is encountered, the generated exception will include
                //     details of the specific entity property that generated the error.
                //     Enabling this option incurs a small performance overhead during query execution.
                //     Note that if the application is setting the internal service provider through
                //     a call to Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider),
                //     then this option must configured the same way for all uses of that service provider.
                //     Consider instead not calling Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)
                //     so that EF will manage the service providers and can create new instances as
                //     required.
                //
                // Returns:
                //     The same builder instance so that multiple calls can be chained.
                //options.EnableDetailedErrors = true;


                // Summary:
                //     Enables application data to be included in exception messages, logging, etc.
                //     This can include the values assigned to properties of your entity instances,
                //     parameter values for commands being sent to the database, and other such data.
                //     You should only enable this flag if you have the appropriate security measures
                //     in place based on the sensitivity of this data.
                //     Note that if the application is setting the internal service provider through
                //     a call to Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider),
                //     then this option must configured the same way for all uses of that service provider.
                //     Consider instead not calling Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)
                //     so that EF will manage the service providers and can create new instances as
                //     required.
                //
                // Returns:
                //     The same builder instance so that multiple calls can be chained.
                //options.EnableSensitiveDataLogging()


                // Summary:
                //     Gets a value indicating whether any options have been configured.
                //     This can be useful when you have overridden 
                // Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)
                //     to configure the context, but in some cases you also externally provide options
                //     via the context constructor. This property can be used to determine if the options
                //     have already been set, and skip some or all of the logic in 
                // Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder).
                //options.IsConfigured

                // Summary:
                //     Replaces the internal Entity Framework implementation of a service contract with
                //     a different implementation.
                //     This method can only be used when EF is building and managing its internal service
                //     provider. If the service provider is being built externally and passed to Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider),
                //     then replacement services should be configured on that service provider before
                //     it is passed to EF.
                //     The replacement service gets the same scope as the EF service that it is replacing.
                //
                // Type parameters:
                //   TService:
                //     The type (usually an interface) that defines the contract of the service to replace.
                //
                //   TImplementation:
                //     The new implementation type for the service.
                //
                // Returns:
                //     The same builder instance so that multiple calls can be chained.
                //options.ReplaceService()


                // Summary:
                //     Sets the System.IServiceProvider from which application services will be obtained.
                //     This is done automatically when using 'AddDbContext', so it is rare that this
                //     method needs to be called.
                //
                // Parameters:
                //   serviceProvider:
                //     The service provider to be used.
                //
                // Returns:
                //     The same builder instance so that multiple calls can be chained.
                //options.UseApplicationServiceProvider()

                // Summary:
                //     Configures the context to connect to the legacy shared in-memory database. This
                //     method is obsolete. Use Microsoft.EntityFrameworkCore.InMemoryDbContextOptionsExtensions.UseInMemoryDatabase(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.InMemoryDbContextOptionsBuilder})
                //     instead.
                //
                // Parameters:
                //   optionsBuilder:
                //     The builder being used to configure the context.
                //
                //   inMemoryOptionsAction:
                //     An optional action to allow additional in-memory specific configuration.
                //
                // Returns:
                //     The options builder so that further configuration can be chained.
                //options.UseInMemoryDatabase()



                // Summary:
                //     Sets the System.IServiceProvider that the context should resolve all of its services
                //     from. EF will create and manage a service provider if none is specified.
                //     The service provider must contain all the services required by Entity Framework
                //     (and the database being used). The Entity Framework services can be registered
                //     using an extension method on Microsoft.Extensions.DependencyInjection.IServiceCollection.
                //     For example, the Microsoft SQL Server provider includes an AddEntityFrameworkSqlServer()
                //     method to add the required services.
                //     If the System.IServiceProvider has a Microsoft.EntityFrameworkCore.DbContextOptions
                //     or Microsoft.EntityFrameworkCore.DbContextOptions`1 registered, then this will
                //     be used as the options for this context instance.
                //
                // Parameters:
                //   serviceProvider:
                //     The service provider to be used.
                //
                // Returns:
                //     The same builder instance so that multiple calls can be chained.
                //options.UseInternalServiceProvider()


                // Summary:
                //     Sets the Microsoft.Extensions.Logging.ILoggerFactory that will be used to create
                //     Microsoft.Extensions.Logging.ILogger instances for logging done by this context.
                //     It is never necessary to call this method since EF can obtain or create a logger
                //     factory automatically.
                //     There is no need to call this method when using one of the 'AddDbContext' methods.
                //     'AddDbContext' will ensure that the Microsoft.Extensions.Logging.ILoggerFactory
                //     used by EF is obtained from the application service provider.
                //     Note that changing the logger factory can cause EF to build a new internal service
                //     provider, which may cause issues with performance. Generally it is expected that
                //     no more than one or two different instances will be used for a given application.
                //     This method cannot be used if the application is setting the internal service
                //     provider through a call to Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider).
                //     In this case, the Microsoft.Extensions.Logging.ILoggerFactory should be configured
                //     directly in that service provider.
                //
                // Parameters:
                //   loggerFactory:
                //     The logger factory to be used.
                //
                // Returns:
                //     The same builder instance so that multiple calls can be chained.
                //options.UseLoggerFactory()



                // Summary:
                //     Sets the Microsoft.Extensions.Caching.Memory.IMemoryCache to be used for query
                //     caching by this context. It is never necessary to call this method since EF can
                //     obtain or create a memory cache automatically.
                //     There is no need to call this method when using one of the 'AddDbContext' methods.
                //     'AddDbContext' will ensure that the Microsoft.Extensions.Caching.Memory.IMemoryCache
                //     used by EF is obtained from the application service provider.
                //     Note that changing the memory cache can cause EF to build a new internal service
                //     provider, which may cause issues with performance. Generally it is expected that
                //     no more than one or two different instances will be used for a given application.
                //     This method cannot be used if the application is setting the internal service
                //     provider through a call to Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider).
                //     In this case, the Microsoft.Extensions.Caching.Memory.IMemoryCache should be
                //     configured directly in that service provider.
                //
                // Parameters:
                //   memoryCache:
                //     The memory cache to be used.
                //
                // Returns:
                //     The same builder instance so that multiple calls can be chained.
                //options.UseMemoryCache()


                // Summary:
                //     Sets the model to be used for the context. If the model is set, then Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)
                //     will not be run.
                //
                // Parameters:
                //   model:
                //     The model to be used.
                //
                // Returns:
                //     The same builder instance so that multiple calls can be chained.
                //options.UseModel()


                // Summary:
                //     Sets the tracking behavior for LINQ queries run against the context. Disabling
                //     change tracking is useful for read-only scenarios because it avoids the overhead
                //     of setting up change tracking for each entity instance. You should not disable
                //     change tracking if you want to manipulate entity instances and persist those
                //     changes to the database using Microsoft.EntityFrameworkCore.DbContext.SaveChanges.
                //     This method sets the default behavior for all contexts created with these options,
                //     but you can override this behavior for a context instance using Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.QueryTrackingBehavior
                //     or on individual queries using the Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})
                //     and Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsTracking``1(System.Linq.IQueryable{``0})
                //     methods.
                //     The default value is Microsoft.EntityFrameworkCore.QueryTrackingBehavior.TrackAll.
                //     This means the change tracker will keep track of changes for all entities that
                //     are returned from a LINQ query.
                //
                // Returns:
                //     The same builder instance so that multiple calls can be chained.
                //options.UseQueryTrackingBehavior()


                // Summary:
                //     Configures the context to connect to a Microsoft SQL Server database.
                //
                // Parameters:
                //   optionsBuilder:
                //     The builder being used to configure the context.
                //
                //   connectionString:
                //     The connection string of the database to connect to.
                //
                //   sqlServerOptionsAction:
                //     An optional action to allow additional SQL Server specific configuration.
                //
                // Returns:
                //     The options builder so that further configuration can be chained.
                //options.UseSqlServer()


            });



        }


    }
}
