using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Threading.Tasks;

namespace AppTemplateCore.Models.DataAnnotations.Database_DA
{
    //Data Annotations - DatabaseGenerated Attribute in EF 6 & EF Core

    //As you know, EF creates an IDENTITY column in the database for all the id(key) properties 
    //of the entity, by default. 
    //So, the underlying database generates a value for this column on each insert command, 
    //e.g., SQL Server creates an integer IDENTITY column with identity seed and increment to 1.

    //EF 6 and EF Core provide the DatabaseGenerated data annotation attribute 
    //to configure how the value of a property will be generated. 
    // CONFIQURE HOW THE VALUE OF THE PROPERTY WILL BE GENERATED.

    //The DatabaseGenerated attribute takes one out of the following three 
    //DatabaseGeneratedOption enum values :

    //DatabaseGeneratedOption.None
    //DatabaseGeneratedOption.Identity
    //DatabaseGeneratedOption.Computed

    //DatabaseGeneratedOption.Identity
    //You can mark the non-key(non-id) properties as DB-generated properties by using the 
    //DatabaseGeneratedOption.Identity option.

    //This specifies that the value of the property will be generated by the database on the 
    //INSERT statement.This Identity property cannot be updated.

    //Please note that the way the value of the Identity property will be generated by the 
    //database depends on the database provider. It can be identity, rowversion or GUID.
    //SQL Server makes an identity column for an integer property.

    public class Course32566
    {
        public int CourseId { get; set; }

        public string CourseName { get; set; }

        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int RecordNum { get; set; }
    }


    //In the above example, the RecordNum property will be an identity property.
    //This means that EF will create an IDENTITY column in the SQL Server database for this property.

    //Use the ValueGeneratedOnAdd() method of Fluent API to specify an Identity property in EF Core, 
    //as shown below.

    //modelBuilder.Entity<Course>()
    //.Property(p => p.RecordNum)
    //.ValueGeneratedOnAdd();

    ///////////////////////////////////////////////////////////////////////////////////

    //DatabaseGenerated.Identity
    //When we apply Identity attribute to a property, the entity framework expects that the DATABASE 
    //will compute its value when we insert a new row.

    //If we apply this attribute to the NUMERIC property, the Entity Framework will create the 
    //identity column in the database. 

    //Remember that you can have only one identity column in the database, I THINK IN TABLE.

    public class CustomerHFFFFE
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        public int CustomerID { get; set; }

        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int SrNo { get; set; }

        public string Test { get; set; }

        public string CustomerName { get; set; }

        public DateTime? Created { get; set; } = DateTime.UtcNow;

    }

    //The above will create the SrNo as Identity column in the database.
    //The entity framework also retrieves the computed value from the database after the insert.
    //When you INSERT the data into the table, the EF generates the following TWO queries. 
    // INSERT ==> INSERT & SELECT
    //Note that the insert query does not contain SrNo field. 
    //Once inserted, the EF attempts to read the SrNo from the Database, so as to update the SrNo field.

    //INSERT INTO[Customer] ([CustomerID], [Created], [CustomerName], [Test])
    //VALUES(@p0, @p1, @p2, @p3);

    //SELECT[SrNo]
    //FROM[Customer]
    //WHERE @@ROWCOUNT = 1 AND[CustomerID] = @p0;

    //While in case of UPDATE the EF generates the following query.
    //The SrNo is not in the Insert query, because EF knows that the database generates the value 
    //only when inserting the values.

    //UPDATE[Customer] SET [Created] = @p0, [CustomerName] = @p1, [Test] = @p2
    //WHERE[CustomerID] = @p3;
    // SELECT @@ROWCOUNT;

    //UPDATE[Customer] SET[Created] = @p0, [CustomerName] = @p1, [Test] = @p2
    //WHERE[CustomerID] = @p3;
    //SELECT @@ROWCOUNT;


}
